// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: protofiles/service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LoadBalancer_ProcessClientRequest_FullMethodName   = "/service.LoadBalancer/ProcessClientRequest"
	LoadBalancer_ProcessServerHeartbeat_FullMethodName = "/service.LoadBalancer/ProcessServerHeartbeat"
)

// LoadBalancerClient is the client API for LoadBalancer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoadBalancerClient interface {
	ProcessClientRequest(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerInfo, error)
	ProcessServerHeartbeat(ctx context.Context, in *ServerInfo, opts ...grpc.CallOption) (*ServerReply, error)
}

type loadBalancerClient struct {
	cc grpc.ClientConnInterface
}

func NewLoadBalancerClient(cc grpc.ClientConnInterface) LoadBalancerClient {
	return &loadBalancerClient{cc}
}

func (c *loadBalancerClient) ProcessClientRequest(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerInfo)
	err := c.cc.Invoke(ctx, LoadBalancer_ProcessClientRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerClient) ProcessServerHeartbeat(ctx context.Context, in *ServerInfo, opts ...grpc.CallOption) (*ServerReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerReply)
	err := c.cc.Invoke(ctx, LoadBalancer_ProcessServerHeartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoadBalancerServer is the server API for LoadBalancer service.
// All implementations must embed UnimplementedLoadBalancerServer
// for forward compatibility.
type LoadBalancerServer interface {
	ProcessClientRequest(context.Context, *ClientRequest) (*ServerInfo, error)
	ProcessServerHeartbeat(context.Context, *ServerInfo) (*ServerReply, error)
	mustEmbedUnimplementedLoadBalancerServer()
}

// UnimplementedLoadBalancerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLoadBalancerServer struct{}

func (UnimplementedLoadBalancerServer) ProcessClientRequest(context.Context, *ClientRequest) (*ServerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessClientRequest not implemented")
}
func (UnimplementedLoadBalancerServer) ProcessServerHeartbeat(context.Context, *ServerInfo) (*ServerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessServerHeartbeat not implemented")
}
func (UnimplementedLoadBalancerServer) mustEmbedUnimplementedLoadBalancerServer() {}
func (UnimplementedLoadBalancerServer) testEmbeddedByValue()                      {}

// UnsafeLoadBalancerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoadBalancerServer will
// result in compilation errors.
type UnsafeLoadBalancerServer interface {
	mustEmbedUnimplementedLoadBalancerServer()
}

func RegisterLoadBalancerServer(s grpc.ServiceRegistrar, srv LoadBalancerServer) {
	// If the following call pancis, it indicates UnimplementedLoadBalancerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LoadBalancer_ServiceDesc, srv)
}

func _LoadBalancer_ProcessClientRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerServer).ProcessClientRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadBalancer_ProcessClientRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerServer).ProcessClientRequest(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancer_ProcessServerHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerServer).ProcessServerHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadBalancer_ProcessServerHeartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerServer).ProcessServerHeartbeat(ctx, req.(*ServerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// LoadBalancer_ServiceDesc is the grpc.ServiceDesc for LoadBalancer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoadBalancer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.LoadBalancer",
	HandlerType: (*LoadBalancerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessClientRequest",
			Handler:    _LoadBalancer_ProcessClientRequest_Handler,
		},
		{
			MethodName: "ProcessServerHeartbeat",
			Handler:    _LoadBalancer_ProcessServerHeartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofiles/service.proto",
}

const (
	TaskRunner_RunTask_FullMethodName = "/service.TaskRunner/RunTask"
)

// TaskRunnerClient is the client API for TaskRunner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskRunnerClient interface {
	RunTask(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerReply, error)
}

type taskRunnerClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskRunnerClient(cc grpc.ClientConnInterface) TaskRunnerClient {
	return &taskRunnerClient{cc}
}

func (c *taskRunnerClient) RunTask(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerReply)
	err := c.cc.Invoke(ctx, TaskRunner_RunTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskRunnerServer is the server API for TaskRunner service.
// All implementations must embed UnimplementedTaskRunnerServer
// for forward compatibility.
type TaskRunnerServer interface {
	RunTask(context.Context, *ClientRequest) (*ServerReply, error)
	mustEmbedUnimplementedTaskRunnerServer()
}

// UnimplementedTaskRunnerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskRunnerServer struct{}

func (UnimplementedTaskRunnerServer) RunTask(context.Context, *ClientRequest) (*ServerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunTask not implemented")
}
func (UnimplementedTaskRunnerServer) mustEmbedUnimplementedTaskRunnerServer() {}
func (UnimplementedTaskRunnerServer) testEmbeddedByValue()                    {}

// UnsafeTaskRunnerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskRunnerServer will
// result in compilation errors.
type UnsafeTaskRunnerServer interface {
	mustEmbedUnimplementedTaskRunnerServer()
}

func RegisterTaskRunnerServer(s grpc.ServiceRegistrar, srv TaskRunnerServer) {
	// If the following call pancis, it indicates UnimplementedTaskRunnerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskRunner_ServiceDesc, srv)
}

func _TaskRunner_RunTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskRunnerServer).RunTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskRunner_RunTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskRunnerServer).RunTask(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskRunner_ServiceDesc is the grpc.ServiceDesc for TaskRunner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskRunner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.TaskRunner",
	HandlerType: (*TaskRunnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunTask",
			Handler:    _TaskRunner_RunTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofiles/service.proto",
}
