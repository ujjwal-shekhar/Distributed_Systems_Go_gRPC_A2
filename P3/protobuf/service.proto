syntax="proto3";

package services.common.genproto.comms;
import "google/protobuf/descriptor.proto";
option go_package = "github.com/ujjwal-shekhar/common/stripe-clone";

enum Role {
  UNSPECIFIED = 0;
  CUSTOMER = 1;
  ADMIN = 2;
  BANK = 3;
  GATEWAY = 4;
}

message RBAC {
  repeated Role allowed_roles = 1;
  bool allow_unauthenticated = 2;
}

extend google.protobuf.MethodOptions {
  optional RBAC access_control = 90000;
}

///////////////////////////
service StripeService {
  rpc ClientLogin(ClientLoginRequest) returns (ClientSessionResponse) {
    option (services.common.genproto.comms.access_control) = {
      allowed_roles: [],
      allow_unauthenticated: true
    };
  }

  rpc BankRegister(BankRegistrationRequest) returns (BankRegistrationResponse) {
    option (services.common.genproto.comms.access_control) = {
      allowed_roles: [],
      allow_unauthenticated: true
    };
  }

  rpc CheckBalance(CheckBalanceRequest) returns (CheckBalanceResponse) {
    option (services.common.genproto.comms.access_control) = {
      allowed_roles: [CUSTOMER, ADMIN],
      allow_unauthenticated: false
    };
  }

  rpc MakePayment(MakePaymentRequest) returns (MakePaymentResponse) {
    option (services.common.genproto.comms.access_control) = {
      allowed_roles: [CUSTOMER, ADMIN],
      allow_unauthenticated: false
    };
  }
}

message ClientLoginRequest {
  string username = 1;
  string bankname = 2;
  string password = 3; // We have used mTLS so its lite
}

message ClientSessionResponse {
  string token = 1; // JWT token be goin here
  bool success = 2;
  string role = 3;
}

message BankRegistrationRequest {
  string bankname = 1;
  string address = 2;
}

message BankRegistrationResponse {
  bool success = 1;
}

message CheckBalanceRequest {
  string username = 1;
  string bankname = 2;
}

message CheckBalanceResponse {
  int32 balance = 1;
  bool success = 2;
}

message MakePaymentRequest {
  string sender_username = 1;
  string sender_bankname = 2;

  string receiver_username = 3;
  string receiver_bankname = 4;

  int32 amount = 5;
}

message MakePaymentResponse {
  bool success = 1;
}

///////////////////////////
service BankService {
  rpc GetClientSession(ClientLoginRequest) returns (ClientSessionResponse) {}
  rpc CheckBalance(CheckBalanceRequest) returns (CheckBalanceResponse) {}
  rpc QueryPayment(QueryPaymentRequest) returns (QueryPaymentResponse) {}
  rpc PersistPayment(PersistPaymentRequest) returns (PersistPaymentResponse) {}
}

message QueryPaymentRequest {
  string username = 1;
  bool is_sender = 2;
  int32 amount = 3;
}

message QueryPaymentResponse {
  bool vote = 1;
}

message PersistPaymentRequest {
  bool to_commit = 1;
  string username = 2;
  bool is_sender = 3;
  int32 amount = 4;
}

message PersistPaymentResponse {
  bool success = 1;
}